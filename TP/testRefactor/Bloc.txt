option auto= true;
option version = 0.0.1 ;
option k=1;


-- inh gauche	    : Expression for SuiteCondition, SuiteTerme, SuiteFacteur;
-- inh tds         : SymbolTable for Bloc, Instruction,
--                                SuiteConditionnelle, Instructions, Expression, Condition,
--                                SuiteCondition, Terme, SuiteTerme, Facteur, SuiteFacteur, Type, Valeur,
--                                Champs, Champ, Expressions, SuiteExpressions ;
-- inh factory	    : BlockFactory for Bloc, Instruction,
--     		  	       SuiteConditionnelle, Instructions, Expression, Condition,
-- 			       SuiteCondition, Terme, SuiteTerme, Facteur, SuiteFacteur, Type, Valeur,
--                                Champs, Champ, Expressions, SuiteExpressions ;  
-- syn ast		: Block for Programme, Bloc, SuiteConditionnelle ;
-- syn ast         : LinkedList<Instruction> for Instructions ;
-- syn ast         : Instruction for Instruction ;
-- syn ast		: Expression for Expression, Condition, SuiteCondition, Terme, SuiteTerme, Facteur, SuiteFacteur, Valeur ;
-- syn ast		: Type for Type ;
-- syn champs      : LinkedList<FieldDeclaration> for Champs;
-- syn champ       : FieldDeclaration for Champ;
-- syn expressions : LinkedList<Expression> for Expressions, SuiteExpressions;
-- syn bin_op	: BinaryOperator for Additif, Multiplicatif, Comparatif;

space  whitespace           is  "[\n\r\t ]+";
space  comments             is  "\/\/.*\n";

sugar  left_braces          is    "\{";
sugar  right_braces         is    "\}";
sugar  left_bracket         is    "\[";
sugar  right_bracket        is    "\]";
sugar  left_parenthesis     is    "\(";
sugar  right_parenthesis    is    "\)";
sugar  inf                  is    "\<";
sugar  sup                  is    "\>";
sugar  inf_or_equal         is    "\<=";
sugar  sup_or_equal         is    "\>=";
sugar  period               is    "\.";
sugar  semicolon            is    ";";
sugar  comma                is    ",";
sugar  assign               is    "=";
sugar  equality             is    "==";
sugar  different            is    "\!=";
sugar  add                  is    "\+";
sugar  subtract             is    "\-";
sugar  or                   is    "\|\|";
sugar  multiply             is    "\*";
sugar  divide               is    "/";
sugar  modulo               is    "%";
sugar  not                  is    "\!";
sugar  and                  is    "&&";
sugar  true                 is    "true";
sugar  false                is    "false";
sugar  if                   is    "if";
sugar  else                 is    "else";
sugar  print                is    "print";
sugar  while                is    "while";
sugar  first                is    "fst";
sugar  second               is    "snd";
sugar  typedef              is    "typedef";
sugar  type_int             is    "int";
sugar  type_bool            is    "bool";
sugar  struct               is    "struct";
sugar  constant             is    "const";

term   integer              is    "[0-9]+";
term   identifier           is    "[a-z][a-zA-Z0-9_]*";
term   identifier_type      is    "[A-Z][a-zA-Z0-9_]*";


-- Programme -> identificateur #inh Bloc #ast ;
-- #inh {
--     do
--         Bloc^factory := new BlockFactoryImpl();
--         Bloc^tds := new SymbolTable();
--     end
-- }
-- #ast {
--     do
--         Programme^ast := Bloc^ast;
--     end
-- }
--
-- Bloc -> accolade_ouvrante #inh Instructions accolade_fermante #ast ;
-- #inh {
--     do
--         Instructions^tds := new SymbolTable(Bloc^tds);
--     end
-- }
--
-- #ast {
--     do
--         Bloc^ast := Bloc^factory.createBlock(Instructions^ast);
--     end
-- }
--
-- Type -> type_bool #ast ;
-- #ast {
--     do
--         Type^ast := Type^factory.createBooleanType();
--     end
-- }
--
-- Type -> type_int  #ast ;
-- #ast {
--     do
--         Type^ast := Type^factory.createIntegerType();
--     end
-- }
--
-- Type -> inferieur Type virgule Type superieur  #ast;
-- #ast {
--     do
--         Type^ast := Type^factory.createCoupleType(Type1^ast, Type2^ast);
--     end
-- }
--
-- Type -> identificateur_type #ast ;
-- #ast {
--     local
--         d : Optional<Declaration> ;
--         t : Declaration ;
--     do
--         -- si l'identificateur de type est connu
--         if Type^tds.knows(identificateur_type^txt) then
--             d := Type^tds.get(identificateur_type^txt);
--             if (d.isPresent()) then
--                 t := d.get() ;
--                 match t
--                 with TypeDeclaration then Type^ast := t.getType();
--                 else
--                     error(BLOC_not_a_type, identificateur_type^txt);
--                 end
--             else
--                 error(BLOC_undefined_ident, identificateur_type^txt);
--             end
--         else
--             error(BLOC_undefined_ident, identificateur_type^txt);
--         end
--     end
-- }
--
-- Type -> enregistrement identificateur_type accolade_ouvrante #inh Champs accolade_fermante #ast ;
-- global
--     t : RecordType ;
-- #inh {
--     do
--         if (Type^tds.contains(identificateur_type^txt)) then
--             error(BLOC_already_defined, identificateur_type^txt);
--         else
--             t := Type^factory.createRecordType(identificateur_type^txt);
--             Type^tds.register(t);
--         end
--     end
-- }
--
-- #ast {
--     do
--         t.addAll(Champs^champs);
--         Type^ast := t;
--     end
-- }
--
-- Champs -> Champ Champs #champs ;
-- #champs {
--     local
--         champs : LinkedList<FieldDeclaration>;
--     do
--         champs := Champs1^champs;
--         champs.addFirst(Champ^champ);
--         Champs^champs := champs;
--     end
-- }
--
-- Champs -> #champs ;
-- #champs {
--     do
--         Champs^champs := new LinkedList<FieldDeclaration>();
--     end
-- }
--
-- Champ -> Type identificateur point_virgule #ast;
-- #ast {
--     do
--         Champ^champ := Champ^factory.createFieldDeclaration(identificateur^txt, Type^ast);
--     end
-- }
--
-- Instructions -> #ast ;
-- #ast {
--     do
--         Instructions^ast := new LinkedList<Instruction>();
--     end
-- }
--
-- Instructions -> Instruction Instructions #ast ;
-- #ast {
--     do
--         Instructions1^ast.addFirst(Instruction^ast);
--         Instructions^ast := Instructions1^ast;
--     end
-- }
--
-- Instruction -> Type identificateur affectation Expression point_virgule #ast;
-- #ast {
--     local
--         varDecl : VariableDeclaration;
--     do
--         if (Instruction^tds.contains(identificateur^txt)) then
--             error(P_02, identificateur^txt);
--         else
--             varDecl := Instruction^factory.createVariableDeclaration(identificateur^txt, Type^ast, Expression^ast);
--             Instruction^tds.register(varDecl);
--             Instruction^ast := Instruction^factory.createAssignment(varDecl, Expression^ast);
--         end
--     end
-- }
--
-- Instruction -> typedef Type identificateur_type point_virgule #ast ;
-- #ast {
--     local
--         v : TypeDeclaration ;
--     do
--         if Instruction^tds.contains(identificateur_type^txt) then
--             error(B_00, identificateur_type^txt);
--         else
--             v := Instruction^factory.createTypeDeclaration(identificateur_type^txt, Type^ast);
--             Instruction^tds.register(v);
--             Instruction^ast := v;
--         end
--     end
-- }
--
-- Instruction -> identificateur affectation Expression point_virgule #ast ;
-- #ast {
--     local
--         decl : Optional<Declaration>;
--         fdecl : Declaration;
--     do
--         if (!Instruction^tds.knows(identificateur^txt)) then
--             error(P_01, identificateur^txt);
--         else
--             decl := Instruction^tds.get(identificateur^txt);
--             fdecl := decl.get();
--             match fdecl
--                 with ConstantDeclaration then error(P_03, identificateur^txt);
--                 with VariableDeclaration then Instruction^ast := Instruction^factory.createAssignment(fdecl, Expression^ast);
--             end
--         end
--     end
-- }
--
-- Instruction -> constante Type identificateur affectation Valeur point_virgule #ast ;
-- #ast {
--     local
--         cstDecl : ConstantDeclaration ;
--     do
--         if (Instruction^tds.contains(identificateur^txt)) then
--             error(P_02, identificateur^txt);
--         else
--             cstDecl := Instruction^factory.createConstantDeclaration(identificateur^txt, Type^ast, Valeur^ast);
--             Instruction^tds.register(cstDecl);
--             Instruction^ast := cstDecl;
--         end
--     end
-- }
--
-- Instruction -> si parenthese_ouvrante Expression parenthese_fermante Bloc SuiteConditionnelle #ast ;
-- #ast {
--     do
--         if (SuiteConditionnelle^ast = null) then
--             Instruction^ast := Instruction^factory.createConditional(Expression^ast, Bloc^ast);
--         else
--             Instruction^ast := Instruction^factory.createConditional(Expression^ast, Bloc^ast, SuiteConditionnelle^ast);
--         end
--     end
-- }
--
-- SuiteConditionnelle -> #ast ;
-- #ast {
--     do
--         SuiteConditionnelle^ast := null;
--     end
-- }
--
-- SuiteConditionnelle ->sinon Bloc #ast ;
-- #ast {
--     do
--         SuiteConditionnelle^ast := Bloc^ast;
--     end
-- }
--
-- Instruction -> tant_que parenthese_ouvrante Expression parenthese_fermante Bloc #ast ;
-- #ast {
--     do
--         Instruction^ast := Instruction^factory.createRepetition(Expression^ast, Bloc^ast);
--     end
-- }
--
-- Instruction -> afficher parenthese_ouvrante Expression parenthese_fermante point_virgule #ast ;
-- #ast {
--     do
--         Instruction^ast := Instruction^factory.createPrinter(Expression^ast);
--     end
-- }
--
-- Expression -> Condition #inh SuiteCondition #ast ;
-- #inh {
-- do
--    SuiteCondition^gauche := Condition^ast ;
-- end
-- }
-- #ast {
-- do
--     Expression^ast := SuiteCondition^ast;
-- end
-- }
--
-- SuiteCondition -> Comparatif Condition #ast ;
-- #ast {
-- do
-- 	SuiteCondition^ast :=
-- 	SuiteCondition^factory.createBinaryExpression(
--	SuiteCondition^gauche,
--	Comparatif^bin_op,
--	Condition^ast);
--end 
--}
--
--SuiteCondition -> #ast ;
--#ast {
--do
--   SuiteCondition^ast := SuiteCondition^gauche;
--end 
--}
--
--Comparatif -> egalite #texte;
--#texte {
--do
--   Comparatif^bin_op := BinaryOperator.Equals;
--end
--}
--
--Comparatif -> different #texte;
--#texte {
--    do
--        Comparatif^bin_op := BinaryOperator.Different;
--    end
--}
--
--Comparatif -> inferieur #texte;
--#texte {
--    do
--        Comparatif^bin_op := BinaryOperator.Lesser;
--    end
--}
--
--Comparatif -> inferieur_egal #texte;
--#texte {
--    do
--        Comparatif^bin_op := BinaryOperator.LesserOrEqual;
--    end
--}
--
--Comparatif -> superieur #texte;
--#texte {
--    do
--        Comparatif^bin_op := BinaryOperator.Greater;
--    end
--}
--
--Comparatif -> superieur_egal #texte;
--#texte {
--    do
--        Comparatif^bin_op := BinaryOperator.GreaterOrEqual;
--    end
--}
--
--Condition -> Terme #ast_inh SuiteTerme #ast_syn ;
--#ast_inh {
--do 
--   SuiteTerme^gauche := Terme^ast; 
--end 
--}
--
--#ast_syn {
--do
--   Condition^ast := SuiteTerme^ast; 
--end
--}
--
--SuiteTerme -> Additif Terme #ast_inh SuiteTerme #ast_syn ;  
--#ast_inh {
--do
--   SuiteTerme1^gauche := SuiteTerme^factory.createBinaryExpression(
--      SuiteTerme^gauche,  
--      Additif^bin_op,  
--      Terme^ast);  
--end 
--}
--
--#ast_syn {
--do 
--   SuiteTerme^ast := SuiteTerme1^ast; 
--end 
--}
--
--SuiteTerme -> #ast ;
--#ast {
--do
--   SuiteTerme^ast := SuiteTerme^gauche;
--end
--}
--
--Additif -> addition #ast;  
--#ast { 
--do  
--   Additif^bin_op := BinaryOperator.Add;  
--end  
--}
--
--Additif -> soustraction #ast;
--#ast {
--    do
--        Additif^bin_op := BinaryOperator.Substract;
--    end
--}  
--
--Additif -> ou #ast;
--#ast {
--    do
--        Additif^bin_op := BinaryOperator.Or;
--    end
--}  
--
--Multiplicatif -> division #ast;
--#ast {
--    do
--        Multiplicatif^bin_op := BinaryOperator.Divide;
--    end
--}  
--
--Multiplicatif -> modulo #ast;
--#ast {
--    do
--        Multiplicatif^bin_op := BinaryOperator.Modulo;
--    end
--}  
--
--Multiplicatif -> et #ast;
--#ast {
--    do
--        Multiplicatif^bin_op := BinaryOperator.And;
--    end
--}
--
--Terme -> Facteur #ast_inh SuiteFacteur #ast_syn ;
--#ast_inh {
--do 
--   SuiteFacteur^gauche := Facteur^ast; 
--end 
--}
--
--#ast_syn {
--do
--   Terme^ast := SuiteFacteur^ast; 
--end
--}
--
--SuiteFacteur -> Multiplicatif Facteur #ast_inh SuiteFacteur #ast_syn ;  
--#ast_inh {
--do 
--   SuiteFacteur1^gauche := SuiteFacteur^factory.createBinaryExpression(
--      SuiteFacteur^gauche,  
--      Multiplicatif^bin_op,  
--      Facteur^ast);  
--end 
--}
--
--#ast_syn {
--do 
--   SuiteFacteur^ast := SuiteFacteur1^ast; 
--end 
--}
-- 
--SuiteFacteur -> #ast;  
--#ast {
--do
--   SuiteFacteur^ast := SuiteFacteur^gauche;
--end
--}
--
--Multiplicatif -> multiplication #ast; 
--#ast {
--do 
--   Multiplicatif^bin_op := BinaryOperator.Multiply; 
--end 
--}
--
--Facteur -> accolade_ouvrante Expressions accolade_fermante #ast ;
--#ast {
--    do
--        Facteur^ast := Facteur^factory.createSequence(Expressions^expressions);
--    end
--}
--
--Expressions -> Expression SuiteExpressions #ast ;
--#ast {
--    do
--        SuiteExpressions^expressions.addFirst(Expression^ast);
--        Expressions^expressions := SuiteExpressions^expressions;
--    end
--}
--
--SuiteExpressions -> virgule Expression SuiteExpressions #ast ;
--#ast {
--    do
--        SuiteExpressions1^expressions.addFirst(Expression^ast);
--        SuiteExpressions^expressions := SuiteExpressions1^expressions;
--    end
--}
--
--SuiteExpressions -> #ast ;
--#ast {
--    do
--        SuiteExpressions^expressions := new LinkedList<Expression>();
--    end
--}
--
--Facteur -> parenthese_ouvrante Expression parenthese_fermante #ast;  
--#ast { 
--do  
--   Facteur^ast := Expression^ast;  
--end  
--}
-- 
---- Facteur -> entier #ast;
---- #ast {
---- do
----    Facteur^ast := Facteur^factory.createIntegerValue(entier^txt); 
---- end
---- }
---- 
---- Facteur -> vrai #ast;
---- #ast {
---- do
----     Facteur^ast := Facteur^factory.createBooleanValue(true);  
---- end
---- }
---- 
---- Facteur -> faux #ast;
---- #ast {
---- do
----     Facteur^ast := Facteur^factory.createBooleanValue(false);  
---- end
---- }
--
--Facteur -> identificateur #ast ;  
--#ast {
--    local
--        decl : Optional<Declaration>;
--        fdecl : Declaration;
--    do 
--        if (!Facteur^tds.knows(identificateur^txt)) then
--            error(P_01, identificateur^txt);
--        else
--            decl := Facteur^tds.get(identificateur^txt);
--            fdecl := decl.get();
--            match fdecl 
--                with VariableDeclaration then Facteur^ast := Facteur^factory.createVariableUse(fdecl);
--                with ConstantDeclaration then Facteur^ast := fdecl.getValue();
--            end
--        end
--    end  
--}
--
---- Facteur -> inferieur Expression virgule Expression superieur #ast ;
---- #ast {
----     do
----         Facteur^ast := Facteur^factory.createCouple(Expression^ast, Expression1^ast);
----     end
---- }  
----  
---- Facteur -> premier Facteur #ast ;
---- #ast {
----     do
----         Facteur^ast := Facteur^factory.createFirst(Facteur1^ast);
----     end
---- }  
----  
---- Facteur -> second Facteur #ast ;  
---- #ast {
----     do
----         Facteur^ast := Facteur^factory.createSecond(Facteur1^ast);
----     end
---- }
--
--Facteur -> Valeur #ast;
--#ast {
--    do
--        Facteur^ast := Valeur^ast;
--    end
--}
--
--Facteur -> soustraction Facteur #ast ;
--#ast {
--    do
--        Facteur^ast := Facteur^factory.createUnaryExpression(UnaryOperator.Opposite, Facteur1^ast) ;
--    end
--}
-- 
--Facteur -> negation Facteur #ast ;
--#ast {
--    do
--        Facteur^ast := Facteur^factory.createUnaryExpression(UnaryOperator.Negate, Facteur1^ast);
--    end
--}
--
--Valeur -> entier #ast;
--#ast {
--    do
--        Valeur^ast := Valeur^factory.createIntegerValue(entier^txt);
--    end
--}
--
--Valeur -> vrai #ast;
--#ast {    
--    do
--        Valeur^ast := Valeur^factory.createBooleanValue(true);
--    end
--}
--
--Valeur -> faux #ast;
--#ast {
--    do
--        Valeur^ast := Valeur^factory.createBooleanValue(false);
--    end
--}
--
--end
